import Head from "next/head";
import type { InferGetServerSidePropsType, GetServerSideProps } from "next";
import { createPagesServerClient } from "@supabase/auth-helpers-nextjs";
import { useMemo } from "react";
import { Footer } from "~/app/footer";
import { Header } from "~/app/header";
import { Container } from "~/uikit/container";
import { Layout } from "~/uikit/layout";
import { Sidebar } from "~/app/sidebar";
import { ProductList, SortType } from "~/app/product-list";
import { useRouter } from "next/router";

type Category = {
  id: number;
  slug: string;
  name: string;
};

type ProductCategory = {
  product: {
    id: number;
    name: string;
    description: string;
    image_url: string;
    slug: string;
    profile: {
      name: string;
      picture: string;
    };
  };
  category: {
    slug: string;
    name: string;
  };
};

type CategoriesPageProps = {
  categories: Array<Category> | null;
  products: Array<ProductCategory> | null;
  slug: string;
  sort: string | null;
};

export const getServerSideProps = (async (ctx) => {
  const supabase = createPagesServerClient(ctx);
  const slug = ctx.params?.slug as string;
  const sort = ctx.query.sort as string | undefined;

  const getCategories = async () => {
    const { data: categories } = await supabase
      .from("category")
      .select<"*", Category>("*")
      .is("parent_id", null);
    return categories;
  };

  const getProducts = async () => {
    let query = supabase
      .from("product_category")
      .select<
        any,
        ProductCategory
      >("product!inner(id, created_at, price, name, description, image_url, slug, profile(name,picture)), category!inner(slug, name)");

    let orderBy = "product(created_at)";
    let orderDirection = "desc";

    if (sort === "oldest") {
      orderBy = "product(created_at)";
      orderDirection = "asc";
    } else if (sort === "price-low") {
      orderBy = "product(price)";
      orderDirection = "asc";
    } else if (sort === "price-high") {
      orderBy = "product(price)";
      orderDirection = "desc";
    }

    const { data: products } = await query
      .eq("product.status", true)
      .eq("category.slug", slug)
      .order(orderBy, {
        ascending: orderDirection === "asc",
      });

    return products;
  };

  const [categories, products] = await Promise.all([
    getCategories(),
    getProducts(),
  ]);

  return {
    props: {
      categories,
      products,
      slug,
      sort: sort || null,
    },
  };
}) satisfies GetServerSideProps<CategoriesPageProps>;

export default function CategoriesPage(
  props: InferGetServerSidePropsType<typeof getServerSideProps>
) {
  const router = useRouter();

  const categories = useMemo(() => {
    return (
      props.categories?.map((cat) => ({
        ...cat,
        href: "/categories/" + cat.slug,
      })) || []
    );
  }, [props.categories]);

  const products = useMemo(() => {
    return (
      props.products?.map((productCategory) => {
        const { product } = productCategory;
        return {
          id: product.id,
          title: product.name,
          description: product.description,
          imageUrl: product.image_url,
          slug: product.slug,
          likes: 0,
          tags: [],
          author: product.profile
            ? {
                name: product.profile.name,
                avatar: product.profile.picture,
              }
            : undefined,
        };
      }) || []
    );
  }, [props.products]);

  return (
    <>
      <Head>
        <title>Sportify</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main>
        <Container>
          <Layout
            leftNode={<Sidebar items={categories} selectedSlug={props.slug} />}
          >
            <ProductList
              items={products}
              showSort
              selectedSort={props.sort as SortType}
              onSortChange={(value) => {
                router.push({
                  pathname: `/categories/${props.slug}`,
                  query: { sort: value },
                });
              }}
            />
          </Layout>
        </Container>
      </main>
      <Footer />
    </>
  );
}
